{"version":3,"sources":["/./node_modules/jellyschema/jellyschema.js","/./node_modules/ky/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","generateJsonAndUiSchema","__wbg_error_cc95a3d302735ca3","__wbg_getTime_22b0af786eae00d0","__wbg_new0_140d74ef05da73b8","__wbg_new_baf10398b0d0c64d","__wbg_call_173f04c850a68d5f","__wbg_self_58232ab37cbe6608","__wbg_crypto_329b714d7e7d321d","__wbg_getRandomValues_2f960218fce3a102","__wbg_getRandomValues_5581e85fc6616df6","__wbg_require_4a70cbfd3adc73a8","__wbg_randomFillSync_355c3fcfa754fa4e","__wbindgen_object_drop_ref","__wbindgen_string_new","__wbindgen_is_undefined","__wbindgen_is_string","__wbindgen_string_get","__wbindgen_json_parse","__wbindgen_json_serialize","__wbindgen_jsval_eq","__wbindgen_rethrow","JellySchema","__wbindgen_throw","_jellyschema_bg__WEBPACK_IMPORTED_MODULE_0__","heap","Array","fill","undefined","push","stack_pointer","addBorrowedObject","obj","Error","getObject","idx","heap_next","length","dropObject","takeObject","ret","arg0","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","getStringFromWasm","ptr","len","decode","subarray","arg1","varg0","slice","console","error","getTime","addHeapObject","Date","Function","call","self","crypto","getRandomValues","getArrayU8FromWasm","arg2","varg1","randomFillSync","i","p","l","cachedTextEncoder","TextEncoder","WASM_VECTOR_LEN","passStringToWasm","arg","buf","encode","set","cachegetUint32Memory","getUint32Memory","Uint32Array","len_ptr","JSON","parse","ptrptr","stringify","a","b","[object Object]","this","freeJellySchema","global","HTTPError","TimeoutError","getGlobal","property","window","document","Headers","Response","fetch","isObject","value","deepMerge","sources","returnValue","source","isArray","key","Object","entries","Reflect","has","requestMethods","responseTypes","retryMethods","Set","retryStatusCodes","retryAfterStatusCodes","response","super","statusText","name","delay","ms","Promise","resolve","setTimeout","timeout","promise","race","normalizeRequestMethod","input","includes","toUpperCase","Ky","hooks","throwHttpErrors","searchParams","json","otherOptions","_retryCount","_options","method","credentials","retry","prefixUrl","String","_input","startsWith","endsWith","url","URL","baseURI","URLSearchParams","search","values","every","param","toString","_timeout","_hooks","beforeRequest","afterResponse","_throwHttpErrors","headers","body","_response","_fetch","type","isRetriableMethod","toLowerCase","fn","async","hook","modifiedResponse","clone","ok","_retry","status","retryAfter","get","after","Number","isNaN","now","_calculateRetryDelay","createInstance","defaults","TypeError","ky","options","extend"],"mappings":"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","file":"3.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './jellyschema_bg';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* Generates JSON and UI schema object\n*\n* ```js\n* {\n    *     \\\"jsonSchema\\\": {...},\n    *     \\\"uiSchema\\\": {...}\n    * }\n    * ```\n    *\n    * # Arguments\n    *\n    * * `schema` - Jelly Schema as an object or a string\n    *\n    * # Throws\n    *\n    * If the input schema is invalid or in case of internal error (serialization).\n    * @param {any} arg0\n    * @returns {any}\n    */\n    export function generateJsonAndUiSchema(arg0) {\n        try {\n            return takeObject(wasm.generateJsonAndUiSchema(addBorrowedObject(arg0)));\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n\n    let cachedTextDecoder = new TextDecoder('utf-8');\n\n    let cachegetUint8Memory = null;\n    function getUint8Memory() {\n        if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n            cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n        }\n        return cachegetUint8Memory;\n    }\n\n    function getStringFromWasm(ptr, len) {\n        return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n    }\n\n    export function __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n\n        varg0 = varg0.slice();\n        wasm.__wbindgen_free(arg0, arg1 * 1);\n\n        console.error(varg0);\n    }\n\n    export function __wbg_getTime_22b0af786eae00d0(arg0) {\n        return getObject(arg0).getTime();\n    }\n\n    function addHeapObject(obj) {\n        if (heap_next === heap.length) heap.push(heap.length + 1);\n        const idx = heap_next;\n        heap_next = heap[idx];\n\n        heap[idx] = obj;\n        return idx;\n    }\n\n    export function __wbg_new0_140d74ef05da73b8() {\n        return addHeapObject(new Date());\n    }\n\n    export function __wbg_new_baf10398b0d0c64d(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n        return addHeapObject(new Function(varg0));\n    }\n\n    export function __wbg_call_173f04c850a68d5f(arg0, arg1) {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    }\n\n    export function __wbg_self_58232ab37cbe6608(arg0) {\n        return addHeapObject(getObject(arg0).self);\n    }\n\n    export function __wbg_crypto_329b714d7e7d321d(arg0) {\n        return addHeapObject(getObject(arg0).crypto);\n    }\n\n    export function __wbg_getRandomValues_2f960218fce3a102(arg0) {\n        return addHeapObject(getObject(arg0).getRandomValues);\n    }\n\n    function getArrayU8FromWasm(ptr, len) {\n        return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n    }\n\n    export function __wbg_getRandomValues_5581e85fc6616df6(arg0, arg1, arg2) {\n        let varg1 = getArrayU8FromWasm(arg1, arg2);\n        getObject(arg0).getRandomValues(varg1);\n    }\n\n    export function __wbg_require_4a70cbfd3adc73a8(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n        return addHeapObject(require(varg0));\n    }\n\n    export function __wbg_randomFillSync_355c3fcfa754fa4e(arg0, arg1, arg2) {\n        let varg1 = getArrayU8FromWasm(arg1, arg2);\n        getObject(arg0).randomFillSync(varg1);\n    }\n\nexport function __wbindgen_object_drop_ref(i) { dropObject(i); }\n\nexport function __wbindgen_string_new(p, l) {\n    return addHeapObject(getStringFromWasm(p, l));\n}\n\nexport function __wbindgen_is_undefined(idx) {\n    return getObject(idx) === undefined ? 1 : 0;\n}\n\nexport function __wbindgen_is_string(i) {\n    return typeof(getObject(i)) === 'string' ? 1 : 0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nexport function __wbindgen_string_get(i, len_ptr) {\n    let obj = getObject(i);\n    if (typeof(obj) !== 'string') return 0;\n    const ptr = passStringToWasm(obj);\n    getUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\n    return ptr;\n}\n\nexport function __wbindgen_json_parse(ptr, len) {\n    return addHeapObject(JSON.parse(getStringFromWasm(ptr, len)));\n}\n\nexport function __wbindgen_json_serialize(idx, ptrptr) {\n    const ptr = passStringToWasm(JSON.stringify(getObject(idx)));\n    getUint32Memory()[ptrptr / 4] = ptr;\n    return WASM_VECTOR_LEN;\n}\n\nexport function __wbindgen_jsval_eq(a, b) {\n    return getObject(a) === getObject(b) ? 1 : 0;\n}\n\nexport function __wbindgen_rethrow(idx) { throw takeObject(idx); }\n\nfunction freeJellySchema(ptr) {\n\n    wasm.__wbg_jellyschema_free(ptr);\n}\n/**\n*/\nexport class JellySchema {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeJellySchema(ptr);\n    }\n\n    /**\n    * Instantiates new JellySchema object\n    *\n    * # Arguments\n    *\n    * * `schema` - JellySchema as a string or an object\n    *\n    * # Throws\n    *\n    * Constructor throws in case of invalid `schema` argument value.\n    * @param {any} arg0\n    * @returns {}\n    */\n    constructor(arg0) {\n        try {\n            this.ptr = wasm.jellyschema_constructor(addBorrowedObject(arg0));\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n    /**\n    * Validates data against JellySchema\n    *\n    * # Arguments\n    *\n    * * `data` - A JSON object\n    * @param {any} arg0\n    * @returns {boolean}\n    */\n    validate(arg0) {\n        try {\n            return (wasm.jellyschema_validate(this.ptr, addBorrowedObject(arg0))) !== 0;\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n    /**\n    * Generates JSON Schema & UI Schema object\n    *\n    * ```js\n    * {\n        *     \\\"jsonSchema\\\": {...},\n        *     \\\"uiSchema\\\": {...}\n        * }\n        * ```\n        *\n        * # Throws\n        *\n        * In case of internal error only (serialization).\n        * @returns {any}\n        */\n        jsonAndUiSchema() {\n            return takeObject(wasm.jellyschema_jsonAndUiSchema(this.ptr));\n        }\n        /**\n        * Returns last validation errors\n        *\n        * # Throws\n        *\n        * In case of internal error only (serialization).\n        * @returns {any}\n        */\n        errors() {\n            return takeObject(wasm.jellyschema_errors(this.ptr));\n        }\n    }\n\n    export function __wbindgen_throw(ptr, len) {\n        throw new Error(getStringFromWasm(ptr, len));\n    }\n\n","/*! MIT License © Sindre Sorhus */\n\nconst getGlobal = property => {\n\t/* istanbul ignore next */\n\tif (typeof self !== 'undefined' && self && property in self) {\n\t\treturn self[property];\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof window !== 'undefined' && window && property in window) {\n\t\treturn window[property];\n\t}\n\n\treturn global[property];\n};\n\nconst document = getGlobal('document');\nconst Headers = getGlobal('Headers');\nconst Response = getGlobal('Response');\nconst fetch = getGlobal('fetch');\n\nconst isObject = value => value !== null && typeof value === 'object';\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = [\n\t'json',\n\t'text',\n\t'formData',\n\t'arrayBuffer',\n\t'blob'\n];\n\nconst retryMethods = new Set([\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n]);\n\nconst retryStatusCodes = new Set([\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n]);\n\nconst retryAfterStatusCodes = new Set([\n\t413,\n\t429,\n\t503\n]);\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\tsuper(response.statusText);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor() {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst timeout = (promise, ms) => Promise.race([\n\tpromise,\n\t(async () => {\n\t\tawait delay(ms);\n\t\tthrow new TimeoutError();\n\t})()\n]);\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nclass Ky {\n\tconstructor(input, {\n\t\ttimeout = 10000,\n\t\thooks,\n\t\tthrowHttpErrors = true,\n\t\tsearchParams,\n\t\tjson,\n\t\t...otherOptions\n\t}) {\n\t\tthis._retryCount = 0;\n\n\t\tthis._options = {\n\t\t\tmethod: 'get',\n\t\t\tcredentials: 'same-origin', // TODO: This can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tretry: 2,\n\t\t\t...otherOptions\n\t\t};\n\t\tthis._options.method = normalizeRequestMethod(this._options.method);\n\t\tthis._options.prefixUrl = String(this._options.prefixUrl || '');\n\t\tthis._input = String(input || '');\n\n\t\tif (this._options.prefixUrl && this._input.startsWith('/')) {\n\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t}\n\t\tif (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {\n\t\t\tthis._options.prefixUrl += '/';\n\t\t}\n\n\t\tthis._input = this._options.prefixUrl + this._input;\n\n\t\tif (searchParams) {\n\t\t\tconst url = new URL(this._input, document && document.baseURI);\n\t\t\tif (typeof searchParams === 'string' || (URLSearchParams && searchParams instanceof URLSearchParams)) {\n\t\t\t\turl.search = searchParams;\n\t\t\t} else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {\n\t\t\t\turl.search = new URLSearchParams(searchParams).toString();\n\t\t\t} else {\n\t\t\t\tthrow new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');\n\t\t\t}\n\t\t\tthis._input = url.toString();\n\t\t}\n\n\t\tthis._timeout = timeout;\n\t\tthis._hooks = deepMerge({\n\t\t\tbeforeRequest: [],\n\t\t\tafterResponse: []\n\t\t}, hooks);\n\t\tthis._throwHttpErrors = throwHttpErrors;\n\n\t\tconst headers = new Headers(this._options.headers || {});\n\n\t\tif (json) {\n\t\t\theaders.set('content-type', 'application/json');\n\t\t\tthis._options.body = JSON.stringify(json);\n\t\t}\n\n\t\tthis._options.headers = headers;\n\n\t\tthis._response = this._fetch();\n\n\t\tfor (const type of responseTypes) {\n\t\t\tconst isRetriableMethod = retryMethods.has(this._options.method.toLowerCase());\n\t\t\tconst fn = async () => {\n\t\t\t\tif (this._retryCount > 0) {\n\t\t\t\t\tthis._response = this._fetch();\n\t\t\t\t}\n\n\t\t\t\tlet response = await this._response;\n\n\t\t\t\tfor (const hook of this._hooks.afterResponse) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst modifiedResponse = await hook(response.clone());\n\n\t\t\t\t\tif (modifiedResponse instanceof Response) {\n\t\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!response.ok && (isRetriableMethod || this._throwHttpErrors)) {\n\t\t\t\t\tthrow new HTTPError(response);\n\t\t\t\t}\n\n\t\t\t\treturn response.clone()[type]();\n\t\t\t};\n\n\t\t\tthis._response[type] = isRetriableMethod ? this._retry(fn) : fn;\n\t\t}\n\n\t\treturn this._response;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!retryStatusCodes.has(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && retryAfterStatusCodes.has(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t_retry(fn) {\n\t\tconst retry = async () => {\n\t\t\ttry {\n\t\t\t\treturn await fn();\n\t\t\t} catch (error) {\n\t\t\t\tconst ms = this._calculateRetryDelay(error);\n\t\t\t\tif (ms !== 0) {\n\t\t\t\t\tawait delay(ms);\n\t\t\t\t\treturn retry();\n\t\t\t\t}\n\n\t\t\t\tif (this._throwHttpErrors) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn retry;\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tawait hook(this._options);\n\t\t}\n\n\t\treturn timeout(fetch(this._input, this._options), this._timeout);\n\t}\n}\n\nconst createInstance = (defaults = {}) => {\n\tif (!isObject(defaults) || Array.isArray(defaults)) {\n\t\tthrow new TypeError('The `defaultOptions` argument must be an object');\n\t}\n\n\tconst ky = (input, options) => new Ky(input, deepMerge({}, defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, deepMerge({}, defaults, options, {method}));\n\t}\n\n\tky.extend = defaults => createInstance(defaults);\n\n\treturn ky;\n};\n\nexport default createInstance();\n\nexport {\n\tHTTPError,\n\tTimeoutError\n};\n"],"sourceRoot":""}